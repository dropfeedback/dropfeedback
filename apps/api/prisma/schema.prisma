// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String   @unique
  emailVerified      Boolean  @default(false)
  isTemporary        Boolean  @default(false)
  hash               String?
  hashedRefreshToken String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  projectMember ProjectMember[]

  @@map("users")
}

model Project {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())

  projectMembers ProjectMember[]
  feedbacks      Feedback[]

  @@map("projects")
}

model ProjectMember {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role      ProjectMemberRole  @default(member)
  state     ProjectMemberState @default(active)
  userId    String             @db.Uuid
  projectId String             @db.Uuid
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Feedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String   @db.Uuid
  content   String   @db.Text
  meta      Json?    @db.Json
  origin    String?  @db.VarChar(255)
  device    String?  @db.VarChar(255)
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

enum ProjectMemberRole {
  arkadaslar
  owner
  manager
  member
}

enum ProjectMemberState {
  active
  pending
}
