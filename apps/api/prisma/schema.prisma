// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String   @unique
  firstName          String?
  lastName           String?
  avatarUrl          String?
  hashedRefreshToken String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  UserProvider  UserProvider[]
  projectMember ProjectMember[]

  @@map("users")
}

model UserProvider {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String           @db.Uuid
  type          UserProviderType
  // It's only for internal users
  hash          String?
  // It's only for internal users
  emailVerified Boolean          @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_providers")
}

model Project {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())

  projectMembers ProjectMember[]
  feedbacks      Feedback[]
  MemberInvite   MemberInvite[]

  @@map("projects")
}

model ProjectMember {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role      ProjectMemberRole @default(member)
  userId    String            @db.Uuid
  projectId String            @db.Uuid
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model MemberInvite {
  id   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role MemberInviteRole @default(member)

  projectId String            @db.Uuid
  email     String
  state     MemberInviteState @default(pending)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([email, projectId])
  @@map("member_invites")
}

model Feedback {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String           @db.Uuid
  content   String           @db.Text
  category  FeedbackCategory @default(other)
  status    FeedbackStatus   @default(new)
  meta      Json?            @db.Json
  origin    String?          @db.VarChar(255)
  device    String?          @db.VarChar(255)
  createdAt DateTime         @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

enum ProjectMemberRole {
  arkadaslar
  owner
  manager
  member
}

enum MemberInviteRole {
  manager
  member
}

enum MemberInviteState {
  pending
  accepted
  rejected
}

enum UserProviderType {
  google
  internal
}

enum FeedbackCategory {
  other
  issue
  idea
}

enum FeedbackStatus {
  new
  archived
}
